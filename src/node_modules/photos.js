// photo = { url: file: or https://s3, isUploading: true / false, isUploaded: true / false }

// TODO proper reject errors
// TODO memory leaks in promises?

export function preflightUpload(channel, file) {
  return new Promise((resolve, reject) => {
    channel
      .push("upload-preflight", { "content-type": file.type })
      .receive("ok", ({ url, key, fields }) => resolve({ url, key, fields }))
      .receive("error", () => reject());
  });
}

export function uploadPhoto(file, url, fields, onProgress) {
  return new Promise((resolve, reject) => {
    let formData = new FormData();
    Object.entries(fields).forEach(([key, val]) => formData.append(key, val));
    formData.append("file", file);

    let xhr = new XMLHttpRequest();
    xhr.onload = () => (xhr.status === 204 ? resolve() : reject());
    xhr.onerror = () => reject();

    if (onProgress) {
      xhr.upload.addEventListener("progress", (event) => {
        if (event.lengthComputable) {
          let percent = Math.round((event.loaded / event.total) * 100);
          onProgress(percent);
        }
      });
    }

    xhr.open("POST", url, true);
    xhr.send(formData);
  });
}

export function maybeWithPlaceholder(photos, maxCount = 6) {
  if (photos.length < maxCount) {
    return [...photos, { url: null, key: null }];
  } else {
    return photos;
  }
}
